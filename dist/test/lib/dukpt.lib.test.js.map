{"version":3,"sources":["../../../test/lib/dukpt.lib.test.js"],"names":["should","require","Dukpt","RandExp","dukpt","bdk","ksn","cc_trackdata_example","cc_trackdata_hex_example","cc_trackdata_encrypted_sample","getRandomText","describe","beforeEach","it","done","encrypted","dukptEncrypt","inputEncoding","equal"],"mappings":";;AAAA,IAAMA,SAASC,QAAQ,QAAR,CAAf;AACA,IAAMC,QAAQD,QAAQ,aAAR,CAAd;AACA,IAAME,UAAUF,QAAQ,SAAR,CAAhB;;AAEA,IAAIG,QAAQ,IAAZ;AACA,IAAIC,MAAM,kCAAV;AACA,IAAIC,MAAM,sBAAV;AACA,IAAIC,uBAAuB,0EAA3B,C,CAAuG;AACvG,IAAIC,2BAA2B,kJAA/B;AACA,IAAIC,gCAAgC,kJAApC;;AAEA,SAASC,aAAT,GAAyB;AACrB,WAAO,IAAIP,OAAJ,CAAY,cAAZ,CAAP;AACH;;AAEDQ,SAAS,iDAAT,EAA4D,YAAM;;AAE9DC,eAAW,YAAK;AACZR,gBAAQ,IAAIF,KAAJ,CAAUG,GAAV,EAAeC,GAAf,CAAR;AACH,KAFD;;AAIAO,OAAG,2EAAH,EAAgF,UAACC,IAAD,EAAU;AACtF,YAAIC,YAAYX,MAAMY,YAAN,CAAmBT,oBAAnB,EAAyC;AACrDU,2BAAe;AADsC,SAAzC,CAAhB;;AAIAF,kBAAUf,MAAV,CAAiBkB,KAAjB,CAAuBT,6BAAvB;AACAK;AACH,KAPD;;AASAD,OAAG,yEAAH,EAA8E,UAACC,IAAD,EAAU;AACpF,YAAIC,YAAYX,MAAMY,YAAN,CAAmBR,wBAAnB,EAA6C;AACzDS,2BAAe;AAD0C,SAA7C,CAAhB;;AAIAF,kBAAUf,MAAV,CAAiBkB,KAAjB,CAAuBT,6BAAvB;AACAK;AACH,KAPD;AAQH,CAvBD","file":"dukpt.lib.test.js","sourcesContent":["const should = require('should');\nconst Dukpt = require('../../index');\nconst RandExp = require('randexp');\n\nlet dukpt = null;\nlet bdk = '0123456789ABCDEFFEDCBA9876543210';\nlet ksn = 'FFFFFFFFFFFFFFFFFFFF';\nlet cc_trackdata_example = '%B4815881002861896^YATES/EUGENE JOHN              ^37829821000123456789?'; // taken from wikipedia. not an actual card\nlet cc_trackdata_hex_example = '2542343831353838313030323836313839365e59415445532f455547454e45204a4f484e20202020202020202020202020205e33373832393832313030303132333435363738393f';\nlet cc_trackdata_encrypted_sample = '88B0208C24474EB41EE216D3BD0D226777FBBE15CEB7A2F840F16588FA583100848D334DD1B33CCD03728AD03E65993BB82F969EC4C5A68A83B8C5D80CC899D0E5C184D5BA48E7FF';\n\nfunction getRandomText() {\n    return new RandExp(/[A-Z0-9]{50}/);\n}\n\ndescribe('dukpt encryption tests with hex output encoding', () => {\n\n    beforeEach(()=> {\n        dukpt = new Dukpt(bdk, ksn);\n    });\n\n    it('should generate correct encrypted output when input encoding type : ascii', (done) => {\n        let encrypted = dukpt.dukptEncrypt(cc_trackdata_example, {\n            inputEncoding: 'ascii'\n        });\n\n        encrypted.should.equal(cc_trackdata_encrypted_sample);\n        done();\n    });\n\n    it('should generate correct encrypted output when input encoding type : hex', (done) => {\n        let encrypted = dukpt.dukptEncrypt(cc_trackdata_hex_example, {\n            inputEncoding: 'hex'\n        });\n\n        encrypted.should.equal(cc_trackdata_encrypted_sample);\n        done();\n    });\n});\n"]}