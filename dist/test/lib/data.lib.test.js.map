{"version":3,"sources":["../../../test/lib/data.lib.test.js"],"names":["should","require","RandExp","DataOperations","getRandomString","gen","getRandomNumericArray","res","i","push","Math","round","random","describe","it","done","padding","getPads","length","equal","replace","base64Encoded","asciiToBase64","base64ToAscii","sanitizedString","removeNullCharsFromAscii","randomArray","hexEncoded","numericArrayToHexstring","test","be","true","resultArr","hexstringToNumericArray","forEach","number","randomString","Buffer","from","toString","result","hexToText"],"mappings":";;;;AAAA,IAAMA,SAASC,QAAQ,QAAR,CAAf;AACA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;AACA,IAAME,iBAAiBF,QAAQ,oBAAR,CAAvB;;AAEA,SAASG,eAAT,GAA2B;AACvB,WAAO,IAAIF,OAAJ,CAAY,oBAAZ,EAAkCG,GAAlC,EAAP;AACH;;AAED,SAASC,qBAAT,GAAiC;AAC7B,QAAMC,MAAM,EAAZ;AACA,SAAI,IAAIC,IAAE,CAAV,EAAaA,IAAG,EAAhB,EAAoBA,GAApB,EAAwB;AACpBD,YAAIE,IAAJ,CAASC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAc,GAAzB,CAAT;AACH;AACD,WAAOL,GAAP;AACH;;AAEDM,SAAS,4BAAT,EAAuC,YAAM;AACzCC,OAAG,4DAAH,EAAiE,UAACC,IAAD,EAAU;AACvE,YAAMC,UAAUb,eAAec,OAAf,CAAuB,GAAvB,EAA4B,EAA5B,CAAhB;AACAD,gBAAQE,MAAR,CAAelB,MAAf,CAAsBmB,KAAtB,CAA4B,EAA5B;AACAH,gBAAQI,OAAR,CAAgB,IAAhB,EAAqB,EAArB,EAAyBF,MAAzB,CAAgClB,MAAhC,CAAuCmB,KAAvC,CAA6C,CAA7C;AACAJ;AACH,KALD;;AAOAD,OAAG,kEAAH,EAAuE,UAACC,IAAD,EAAU;AAC7E,YAAMM,gBAAgBlB,eAAemB,aAAf,CAA6B,OAA7B,CAAtB;AACAD,sBAAcrB,MAAd,CAAqBmB,KAArB,CAA2B,UAA3B;AACAJ;AACH,KAJD;;AAMAD,OAAG,iFAAH,EAAsF,UAACC,IAAD,EAAU;AAC5F,YAAMM,gBAAgBlB,eAAeoB,aAAf,CAA6B,UAA7B,CAAtB;AACAF,sBAAcrB,MAAd,CAAqBmB,KAArB,CAA2B,OAA3B;AACAJ;AACH,KAJD;;AAMAD,OAAG,0FAAH,EAA+F,UAACC,IAAD,EAAU;AACrG,YAAMS,kBAAkBrB,eAAesB,wBAAf,CAAwC,SAAxC,CAAxB;AACAD,wBAAgBxB,MAAhB,CAAuBmB,KAAvB,CAA6B,KAA7B;AACAJ;AACH,KAJD;;AAMAD,OAAG,yGAAH,EAA8G,UAACC,IAAD,EAAU;AACpH,YAAMW,cAAcpB,uBAApB;AACA,YAAMqB,aAAaxB,eAAeyB,uBAAf,CAAuCF,WAAvC,CAAnB;AACA,gBAAQC,UAAR,yCAAQA,UAAR,GAAoB3B,MAApB,CAA2BmB,KAA3B,CAAiC,QAAjC;AACC,qBAAD,CAAgBU,IAAhB,CAAqBF,UAArB,EAAiC3B,MAAjC,CAAwC8B,EAAxC,CAA2CC,IAA3C;AACAhB;AACH,KAND;;AAQAD,OAAG,iFAAH,EAAsF,UAACC,IAAD,EAAU;AAC5F,YAAMW,cAAcpB,uBAApB;AACA,YAAMqB,aAAaxB,eAAeyB,uBAAf,CAAuCF,WAAvC,CAAnB;AACA,YAAMM,YAAY7B,eAAe8B,uBAAf,CAAuCN,UAAvC,CAAlB;AACAK,kBAAUE,OAAV,CAAkB,UAACC,MAAD,EAAS3B,CAAT,EAAe;AAC7B2B,mBAAOnC,MAAP,CAAcmB,KAAd,CAAoBO,YAAYlB,CAAZ,CAApB;AACH,SAFD;AAGAO;AACH,KARD;;AAUAD,OAAG,2DAAH,EAAgE,UAACC,IAAD,EAAU;AACtE,YAAMqB,eAAehC,iBAArB;AACA,YAAMuB,aAAaU,OAAOC,IAAP,CAAYF,YAAZ,EAA0BG,QAA1B,CAAmC,KAAnC,CAAnB;AACA,YAAMC,SAASrC,eAAesC,SAAf,CAAyBd,UAAzB,CAAf;AACAa,eAAOxC,MAAP,CAAcmB,KAAd,CAAoBiB,YAApB;AACArB;AACH,KAND;AAOH,CAnDD","file":"data.lib.test.js","sourcesContent":["const should = require('should');\nconst RandExp = require('randexp');\nconst DataOperations = require('../../lib/data.lib');\n\nfunction getRandomString() {\n    return new RandExp(/[a-zA-Z0-9]{10,50}/).gen();\n}\n\nfunction getRandomNumericArray() {\n    const res = [];\n    for(let i=0; i< 10; i++){\n        res.push(Math.round(Math.random()*100));\n    }\n    return res;\n}\n\ndescribe('data operations test suite', () => {\n    it('should return requested padding string when called getpads', (done) => {\n        const padding = DataOperations.getPads('0', 10);\n        padding.length.should.equal(10);\n        padding.replace(/0/g,'').length.should.equal(0);\n        done();\n    });\n\n    it('should return \"ZHVrcHQ=\" when the word \"dukpt\" is base64 encoded', (done) => {\n        const base64Encoded = DataOperations.asciiToBase64('dukpt');\n        base64Encoded.should.equal('ZHVrcHQ=');\n        done();\n    });\n\n    it('should return \"dukpt\" when the base64 encoded text \"ZHVrcHQ=\" is base64 decoded', (done) => {\n        const base64Encoded = DataOperations.base64ToAscii('ZHVrcHQ=');\n        base64Encoded.should.equal('dukpt');\n        done();\n    });\n\n    it('should return a string with null characters removed when called removeNullCharsFromAscii', (done) => {\n        const sanitizedString = DataOperations.removeNullCharsFromAscii('abc\\u0000\\u0000');\n        sanitizedString.should.equal('abc');\n        done();\n    });\n\n    it('should return a proper hex encoded string when called numericArrayToHexstring() against a numeric array', (done) => {\n        const randomArray = getRandomNumericArray();\n        const hexEncoded = DataOperations.numericArrayToHexstring(randomArray);\n        (typeof hexEncoded).should.equal('string');\n        (/[a-fA-F0-9]/).test(hexEncoded).should.be.true();\n        done();\n    });\n\n    it('should return an array when called hexstringToNumericArray against a hex string', (done) => {\n        const randomArray = getRandomNumericArray();\n        const hexEncoded = DataOperations.numericArrayToHexstring(randomArray);\n        const resultArr = DataOperations.hexstringToNumericArray(hexEncoded);\n        resultArr.forEach((number, i) => {\n            number.should.equal(randomArray[i]);\n        } );\n        done();\n    });\n\n    it('should return a hex string when converted using hexToText', (done) => {\n        const randomString = getRandomString();\n        const hexEncoded = Buffer.from(randomString).toString('hex');\n        const result = DataOperations.hexToText(hexEncoded);\n        result.should.equal(randomString);\n        done();\n    });\n});\n\n"]}