{"version":3,"sources":["../../lib/dukpt.lib.js"],"names":["DataOperations","require","Dukpt","bdk","ksn","_sessionKey","_deriveDukptSessionKey","keyMode","dBDK","dKSN","fieldEmpty","Error","replace","length","ipek","_createIPEK","_createDataKeyHex","_createPINKeyHex","_createMACKeyHex","data","derivedPEK","_deriveKeyHex","CBC","iv","variantMask","maskedPEK","XORdataHex","hexstringToData","left","_des","_EDE3KeyExpand","substring","right","sessionKey","dataToHexstring","key","encryptTrueFalse","binaryKey","binaryData","e","encryptOptions","encryptedOutput","_defaultOptions","encryptionMode","inputEncoding","outputEncoding","options","Object","assign","toLowerCase","toUpperCase","encryptTDES","encryptAES","encryptedData","decryptOptions","decryptedOutput","decryptionMode","trimOutput","removeNullCharsFromAscii","mask","binaryKSN","ANDdata","maskedKSN","cipher","IPEK","XORdata","tailbytes","integerValue","charCodeAt","baseKSN","curKey","counter","_getCounter","pass","shiftReg","tmpKSN","byte5","byte6","byte7","tmpLong","String","fromCharCode","_generateKey","maskedKey","_encryptRegister","reg","bottom8","top8","bottom8xorKSN","desEncrypted","binipek","binksn","dk","_deriveKey","message","encrypt","mode","padding","spfunction1","Array","spfunction2","spfunction3","spfunction4","spfunction5","spfunction6","spfunction7","spfunction8","keys","_des_createKeys","m","i","j","temp","temp2","right1","right2","looping","cbcleft","cbcleft2","cbcright","cbcright2","endloop","loopinc","len","chunk","iterations","result","tempresult","pc2bytes0","pc2bytes1","pc2bytes2","pc2bytes3","pc2bytes4","pc2bytes5","pc2bytes6","pc2bytes7","pc2bytes8","pc2bytes9","pc2bytes10","pc2bytes11","pc2bytes12","pc2bytes13","shifts","lefttemp","righttemp","n","module","exports"],"mappings":"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","file":"dukpt.lib.js","sourcesContent":["const DataOperations = require('./data.lib');\n\nclass Dukpt {\n    constructor(bdk, ksn) {\n        this.bdk = bdk;\n        this.ksn = ksn;\n        this._sessionKey = this._deriveDukptSessionKey();\n    }\n\n    _deriveDukptSessionKey(keyMode = 'datakey') {\n\n        const dBDK = this.bdk;\n        const dKSN = this.ksn;\n\n        if (DataOperations.fieldEmpty([dBDK, dKSN])) {\n            return new Error('a field is blank');\n        }\n        if (dBDK.replace(/\\s/g, \"\").length != 32 ||\n            dKSN.replace(/\\s/g, \"\").length != 20) {\n            return new Error('Key must be 16 bytes long and KSN must be 10 bytes');\n        }\n\n        let ipek = this._createIPEK(dBDK, dKSN); // Always start with IPEK\n\n        if (keyMode == \"datakey\")\n            this._sessionKey = this._createDataKeyHex(ipek, dKSN);\n\n        if (keyMode == \"pinkey\")\n            this._sessionKey = this._createPINKeyHex(ipek, dKSN);\n\n        if (keyMode == \"mackey\")\n            this._sessionKey = this._createMACKeyHex(ipek, dKSN);\n\n        return this._sessionKey;\n    }\n\n    generateDukptSessionKey(ipek, ksn) {\n\n        if (DataOperations.fieldEmpty([ipek, ksn])) {\n            throw new Error('either IPEK or data params not provided');\n        }\n\n        return this._createDataKeyHex(ipek, data);\n    }\n\n    _createDataKeyHex(ipek, ksn) {\n\n        let derivedPEK = this._deriveKeyHex(ipek, ksn);\n\n        const CBC = 1;  \t\t // cipher block chaining enabled\n        const iv = \"\\0\\0\\0\\0\\0\\0\\0\\0\"; // initial vector\n        const variantMask = \"0000000000FF00000000000000FF0000\"; // data variant\n\n        let maskedPEK = DataOperations.XORdataHex(variantMask, derivedPEK); // apply mask\n\n        maskedPEK = DataOperations.hexstringToData(maskedPEK);\n\n        // We need to TDES-encrypt the masked key in two parts, using\n        // itself as the key. This is a so-called one-way function (OWF).\n        // The leftmost 8 bytes are encrypted, then\n        // the rightmost 8 bytes are encrypted separately. In each case,\n        // the key is the entire original 16-byte maskedPEK from the\n        // above step, expanded to 24 bytes per EDE3.\n\n        // left half:\n        const left = this._des(this._EDE3KeyExpand(maskedPEK),\n            maskedPEK.substring(0, 8),\n            true,\n            CBC,\n            iv,\n            null);\n\n        // right half:\n        const right = this._des(this._EDE3KeyExpand(maskedPEK),\n            maskedPEK.substring(8),\n            true,\n            CBC,\n            iv,\n            null);\n\n        let sessionKey = left + right;\n\n        sessionKey = DataOperations.dataToHexstring(sessionKey);\n        return sessionKey; // hex\n    }\n\n    _createPINKeyHex(ipek, ksn) {\n\n        const derivedPEK = this._deriveKeyHex(ipek, ksn); // derive DUKPT basis key\n\n        const CBC = 1;  \t\t // cipher block chaining enabled\n        const iv = \"\\0\\0\\0\\0\\0\\0\\0\\0\"; // initial vector\n        const variantMask = \"00000000000000FF00000000000000FF\"; // PIN variant\n\n        return DataOperations.XORdataHex(variantMask, derivedPEK); // apply mask\n    }\n\n    _createMACKeyHex(ipek, ksn) {\n\n        const derivedPEK = this._deriveKeyHex(ipek, ksn); // derive DUKPT basis key\n\n        const CBC = 1;  \t\t // cipher block chaining enabled\n        const iv = \"\\0\\0\\0\\0\\0\\0\\0\\0\"; // initial vector\n        const variantMask = \"000000000000FF00000000000000FF00\"; // MAC variant\n\n        return DataOperations.XORdataHex(variantMask, derivedPEK); // apply mask\n    }\n\n    encryptTDES(key, data, encryptTrueFalse) {\n\n        let CBC = 1;  \t\t     // cipher block chaining enabled\n        let iv = \"\\0\\0\\0\\0\\0\\0\\0\\0\"; // initial vector\n\n        try {\n            // convert to binary\n            let binaryKey = DataOperations.hexstringToData(key);\n            let binaryData = DataOperations.hexstringToData(data);\n\n            // data should be a multiple of 8 bytes\n            while (binaryData.length % 8)\n                binaryData += \"\\0\";\n\n            return this._des(binaryKey,\n                binaryData,\n                encryptTrueFalse,\n                CBC,\n                iv,\n                null);\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n\n    dukptEncrypt(data, encryptOptions){\n\n        let encryptedOutput = null;\n\n        const _defaultOptions = {\n            encryptionMode: '3DES',\n            inputEncoding: 'ascii',\n            outputEncoding: 'hex'\n        };\n\n        const options = Object.assign({}, _defaultOptions, encryptOptions);\n\n        switch (options.inputEncoding.toLowerCase()){\n            case 'ascii':\n                data = DataOperations.dataToHexstring(data);\n                break;\n            case 'hex':\n                // do nothing\n                break;\n            default:\n                throw new Error(`unsupported input encoding type for dukpt encrypt : '${options.inputEncoding}'`);\n        }\n\n        let key = this._sessionKey.replace(/\\s/g, \"\"); // remove spaces\n        data = data.replace(/\\s/g, \"\");\n\n        if (!key || !data) {\n            return new Error('either session key or data not provided');\n        }\n\n        if (key.length == 32 && options.encryptionMode != \"AES\")\n        {\n            key = this._EDE3KeyExpand(key);\n        }\n\n        switch (options.encryptionMode.toUpperCase()){\n            case '3DES':\n                encryptedOutput = this.encryptTDES(key, data, true);\n                break;\n            case 'AES':\n                encryptedOutput =  this.encryptAES(key, data, true);\n                break;\n            default:\n                throw new Error('unsupported dukpt encryption method');\n        }\n\n        switch (options.outputEncoding.toLowerCase()){\n            case 'hex':\n                encryptedOutput = DataOperations.dataToHexstring(encryptedOutput);\n                break;\n            case 'ascii':\n                break;\n            default:\n                throw new Error(`unsupported output encoding type for dukpt decrypt : '${options.outputEncoding}'`);\n        }\n\n        return encryptedOutput;\n    }\n\n    dukptDecrypt(encryptedData, decryptOptions){\n\n        let decryptedOutput = null;\n\n        const _defaultOptions = {\n            decryptionMode: '3DES',\n            trimOutput: false,\n            inputEncoding: 'hex',\n            outputEncoding: 'ascii'\n        };\n\n        const options = Object.assign({}, _defaultOptions, decryptOptions);\n\n        let key = this._sessionKey.replace(/\\s/g, \"\"); // remove spaces\n        encryptedData = encryptedData.replace(/\\s/g, \"\");\n\n        if (!key || !encryptedData) {\n            return new Error('either session key or data not provided');\n        }\n\n        if (key.length == 32 && options.decryptionMode != \"AES\")\n        {\n            key = this._EDE3KeyExpand(key);\n        }\n\n        switch (options.decryptionMode.toUpperCase()){\n            case '3DES':\n                decryptedOutput = this.encryptTDES(key, encryptedData, false);\n                break;\n            case 'AES':\n                decryptedOutput = this.encryptAES(key, encryptedData, false);\n                break;\n            default:\n                throw new Error('unsupported dukpt decryption method');\n        }\n\n        if (options.trimOutput){\n            return DataOperations.removeNullCharsFromAscii(decryptedOutput);\n        }\n\n        switch (options.outputEncoding.toLowerCase()){\n            case 'ascii':\n                // do nothing\n                break;\n            case 'hex':\n                decryptedOutput = DataOperations.dataToHexstring(decryptedOutput);\n                break;\n            default:\n                throw new Error('unsupported output encoding for dukpt decrypt');\n        }\n\n        return decryptedOutput;\n    }\n\n    _EDE3KeyExpand(key) {\n\n        return key + key.substring(0, key.length / 2);\n    }\n\n    _getMaskedKSN(ksn) {\n\n        let mask = \"0000FFFFFFFFFFE00000\";\n        mask = DataOperations.hexstringToData(mask); // make it binary\n\n        const binaryKSN = DataOperations.hexstringToData(ksn); // binary\n\n        return DataOperations.ANDdata(mask, binaryKSN); // return binary ksn\n    }\n\n    _createIPEK(bdk, ksn) {\n\n        const CBC = 1;  \t\t     // cipher block chaining enabled\n        const iv = \"\\0\\0\\0\\0\\0\\0\\0\\0\"; // initial vector\n\n        let key = this._EDE3KeyExpand(bdk); // make 24-byte key\n        key = DataOperations.hexstringToData(key); // make it binary\n\n        let maskedKSN = DataOperations.ANDdata(\n            DataOperations.hexstringToData(\"FFFFFFFFFFFFFFE00000\"),\n            DataOperations.hexstringToData(ksn)\n        ); // this is now binary\n\n        maskedKSN = maskedKSN.substring(0, 8); // take 1st 8 bytes only\n\n        // get LEFT half of IPEK\n        let cipher = this._des(key,\n            maskedKSN,\n            true, /* encrypt */\n            CBC,\n            iv,\n            null);\n\n        let IPEK = DataOperations.dataToHexstring(cipher);\n\n        // get RIGHT half of IPEK\n        const mask = \"C0C0C0C000000000C0C0C0C000000000\";\n        key = DataOperations.XORdata(DataOperations.hexstringToData(mask), DataOperations.hexstringToData(bdk));\n        key = this._EDE3KeyExpand(key);\n        cipher = this._des(key,\n            maskedKSN,\n            true, /* encrypt */\n            CBC,\n            iv,\n            null);\n\n        // join the new cipher to the end of the IPEK:\n        IPEK += DataOperations.dataToHexstring(cipher);\n\n        return IPEK;\n    }\n\n    _getCounter(ksn) {\n\n        const tailbytes = ksn.substring(ksn.length - 3);\n        const integerValue = (tailbytes.charCodeAt(0) << 16) +\n            (tailbytes.charCodeAt(1) << 8) +\n            tailbytes.charCodeAt(2);\n        return integerValue & 0x1FFFFF;\n    }\n\n    _deriveKey(ipek, ksn) {\n        if (ksn.length == 10)\n            ksn = ksn.substring(2); // we want the bottom 8 bytes\n\n        let baseKSN = DataOperations.ANDdata(DataOperations.hexstringToData(\"FFFFFFFFFFE00000\"), ksn);\n        let curKey = ipek;\n        let counter = this._getCounter(ksn);\n        let pass = 0;\n\n        for (let shiftReg = 0x100000; shiftReg > 0; shiftReg >>= 1)\n            if (( shiftReg & counter ) > 0) {\n\n                // Need to do baseKSN |= shiftReg\n\n                let tmpKSN = baseKSN.substring(0, 5);\n                let byte5 = baseKSN.charCodeAt(5);\n                let byte6 = baseKSN.charCodeAt(6);\n                let byte7 = baseKSN.charCodeAt(7);\n                let tmpLong = (byte5 << 16) + (byte6 << 8) + byte7;\n                tmpLong |= shiftReg;\n                tmpKSN += String.fromCharCode(tmpLong >> 16);\n                tmpKSN += String.fromCharCode(255 & ( tmpLong >> 8 ));\n                tmpKSN += String.fromCharCode(255 & tmpLong);\n\n                baseKSN = tmpKSN; // remember the updated value\n\n                curKey = this._generateKey(curKey, tmpKSN);\n            }\n\n        return curKey; // binary\n    }\n\n    _generateKey(key, ksn) {\n\n        const mask = \"C0C0C0C000000000C0C0C0C000000000\";\n        const maskedKey = DataOperations.XORdata(DataOperations.hexstringToData(mask), key);\n\n        const left = this._encryptRegister(maskedKey, ksn);\n        const right = this._encryptRegister(key, ksn);\n\n        return left + right; // binary\n\n    }\n\n    _encryptRegister(key, reg) {\n\n        const CBC = 1;  \t\t     // cipher block chaining enabled\n        const iv = \"\\0\\0\\0\\0\\0\\0\\0\\0\"; // initial vector\n\n        const bottom8 = key.substring(key.length - 8); // bottom 8 bytes\n\n        const top8 = key.substring(0, 8); // top 8 bytes\n\n        const bottom8xorKSN = DataOperations.XORdata(bottom8, reg);\n\n        // This will be single-DES because of the 8-byte key:\n        const desEncrypted = this._des(top8,\n            bottom8xorKSN,\n            true, /* encrypt */\n            CBC,\n            iv,\n            null);\n\n        return DataOperations.XORdata(bottom8, desEncrypted);\n\n    }\n\n    _deriveKeyHex(ipek, ksn) {\n\n        const binipek = DataOperations.hexstringToData(ipek);\n        const binksn = DataOperations.hexstringToData(ksn);\n\n        const dk = this._deriveKey(binipek, binksn);\n        return DataOperations.dataToHexstring(dk);\n    }\n\n    _des(key, message, encrypt, mode, iv, padding) {\n        //declaring this locally speeds things up a bit\n        let spfunction1 = new Array(0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 0x4, 0x10000, 0x400, 0x1010400, 0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000, 0x4, 0x404, 0x1000400, 0x1000400, 0x10400, 0x10400, 0x1010000, 0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 0x404, 0x10404, 0x1000000, 0x10000, 0x1010404, 0x4, 0x1010000, 0x1010400, 0x1000000, 0x1000000, 0x400, 0x1010004, 0x10000, 0x10400, 0x1000004, 0x400, 0x4, 0x1000404, 0x10404, 0x1010404, 0x10004, 0x1010000, 0x1000404, 0x1000004, 0x404, 0x10404, 0x1010400, 0x404, 0x1000400, 0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004);\n        let spfunction2 = new Array(-0x7fef7fe0, -0x7fff8000, 0x8000, 0x108020, 0x100000, 0x20, -0x7fefffe0, -0x7fff7fe0, -0x7fffffe0, -0x7fef7fe0, -0x7fef8000, -0x80000000, -0x7fff8000, 0x100000, 0x20, -0x7fefffe0, 0x108000, 0x100020, -0x7fff7fe0, 0, -0x80000000, 0x8000, 0x108020, -0x7ff00000, 0x100020, -0x7fffffe0, 0, 0x108000, 0x8020, -0x7fef8000, -0x7ff00000, 0x8020, 0, 0x108020, -0x7fefffe0, 0x100000, -0x7fff7fe0, -0x7ff00000, -0x7fef8000, 0x8000, -0x7ff00000, -0x7fff8000, 0x20, -0x7fef7fe0, 0x108020, 0x20, 0x8000, -0x80000000, 0x8020, -0x7fef8000, 0x100000, -0x7fffffe0, 0x100020, -0x7fff7fe0, -0x7fffffe0, 0x100020, 0x108000, 0, -0x7fff8000, 0x8020, -0x80000000, -0x7fefffe0, -0x7fef7fe0, 0x108000);\n        let spfunction3 = new Array(0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008, 0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 0x208, 0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000, 0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000, 0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200, 0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0, 0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208, 0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 0x208, 0x8020000, 0x20208, 0x8, 0x8020008, 0x20200);\n        let spfunction4 = new Array(0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081, 0x800001, 0x2001, 0, 0x802000, 0x802000, 0x802081, 0x81, 0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001, 0x80, 0x800000, 0x2001, 0x2080, 0x800081, 0x1, 0x2080, 0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001, 0x802000, 0x802081, 0x81, 0, 0, 0x802000, 0x2080, 0x800080, 0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81, 0x1, 0x2000, 0x800001, 0x2001, 0x802080, 0x800081, 0x2001, 0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080);\n        let spfunction5 = new Array(0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100, 0x40000000, 0x2080000, 0x40080100, 0x80000, 0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000, 0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 0x42000000, 0x80100, 0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100, 0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100, 0x2000000, 0x42080000, 0x42080100, 0x80100, 0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0, 0x40080000, 0x2080100, 0x40000100);\n        let spfunction6 = new Array(0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010, 0x400000, 0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 0x4010, 0, 0x400010, 0x20004010, 0x4000, 0x404000, 0x20004010, 0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000, 0x20404000, 0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010, 0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000, 0x20000000, 0x4010, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0, 0x20400010, 0x10, 0x4000, 0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010, 0, 0x20404000, 0x20000000, 0x400010, 0x20004010);\n        let spfunction7 = new Array(0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800, 0x4200802, 0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800, 0x200802, 0x200002, 0x4000800, 0x4000002, 0x4200000, 0x4200800, 0x200002, 0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800, 0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 0x2, 0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 0x802, 0x200802, 0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802, 0, 0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002);\n        let spfunction8 = new Array(0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000, 0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000, 0x40, 0x10040000, 0x10000040, 0x10001000, 0x1040, 0x41000, 0x40040, 0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000, 0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040, 0x1000, 0x41040, 0x10001000, 0x40, 0x10000040, 0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040, 0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040, 0x1040, 0x40040, 0x10000000, 0x10041000);\n\n        //create the subkeys we will need\n        let keys = this._des_createKeys(key);\n        let m = 0, i, j, temp, temp2, right1, right2, left, right, looping;\n        let cbcleft, cbcleft2, cbcright, cbcright2\n        let endloop, loopinc;\n        let len = message.length;\n        let chunk = 0;\n        //set up the loops for single and triple _des\n        let iterations = keys.length == 32 ? 3 : 9; //single or triple _des\n        if (iterations == 3) {\n            looping = encrypt ? new Array(0, 32, 2) : new Array(30, -2, -2);\n        }\n        else {\n            looping = encrypt ? new Array(0, 32, 2, 62, 30, -2, 64, 96, 2) : new Array(94, 62, -2, 32, 64, 2, 30, -2, -2);\n        }\n\n        //pad the message depending on the padding parameter\n        if (padding == 2) message += \"        \"; //pad the message with spaces\n        else if (padding == 1) {\n            temp = 8 - (len % 8);\n            message += String.fromCharCode(temp, temp, temp, temp, temp, temp, temp, temp);\n            if (temp == 8) len += 8;\n        } //PKCS7 padding\n        else if (!padding) message += \"\\0\\0\\0\\0\\0\\0\\0\\0\"; //pad the message out with null bytes\n\n        //store the result here\n        let result = \"\";\n        let tempresult = \"\";\n\n        if (mode == 1) { //CBC mode\n            cbcleft = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n            cbcright = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n            m = 0;\n        }\n\n        //loop through each 64 bit chunk of the message\n        while (m < len) {\n            left = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);\n            right = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);\n\n            //for Cipher Block Chaining mode, xor the message with the previous result\n            if (mode == 1) {\n                if (encrypt) {\n                    left ^= cbcleft;\n                    right ^= cbcright;\n                } else {\n                    cbcleft2 = cbcleft;\n                    cbcright2 = cbcright;\n                    cbcleft = left;\n                    cbcright = right;\n                }\n            }\n\n            //first each 64 but chunk of the message must be permuted according to IP\n            temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n            right ^= temp;\n            left ^= (temp << 4);\n            temp = ((left >>> 16) ^ right) & 0x0000ffff;\n            right ^= temp;\n            left ^= (temp << 16);\n            temp = ((right >>> 2) ^ left) & 0x33333333;\n            left ^= temp;\n            right ^= (temp << 2);\n            temp = ((right >>> 8) ^ left) & 0x00ff00ff;\n            left ^= temp;\n            right ^= (temp << 8);\n            temp = ((left >>> 1) ^ right) & 0x55555555;\n            right ^= temp;\n            left ^= (temp << 1);\n\n            left = ((left << 1) | (left >>> 31));\n            right = ((right << 1) | (right >>> 31));\n\n            //do this either 1 or 3 times for each chunk of the message\n            for (j = 0; j < iterations; j += 3) {\n                endloop = looping[j + 1];\n                loopinc = looping[j + 2];\n                //now go through and perform the encryption or decryption\n                for (i = looping[j]; i != endloop; i += loopinc) { //for efficiency\n                    right1 = right ^ keys[i];\n                    right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];\n                    //the result is attained by passing these bytes through the S selection functions\n                    temp = left;\n                    left = right;\n                    right = temp ^ (spfunction2[(right1 >>> 24) & 0x3f] | spfunction4[(right1 >>> 16) & 0x3f]\n                        | spfunction6[(right1 >>> 8) & 0x3f] | spfunction8[right1 & 0x3f]\n                        | spfunction1[(right2 >>> 24) & 0x3f] | spfunction3[(right2 >>> 16) & 0x3f]\n                        | spfunction5[(right2 >>> 8) & 0x3f] | spfunction7[right2 & 0x3f]);\n                }\n                temp = left;\n                left = right;\n                right = temp; //unreverse left and right\n            } //for either 1 or 3 iterations\n\n            //move then each one bit to the right\n            left = ((left >>> 1) | (left << 31));\n            right = ((right >>> 1) | (right << 31));\n\n            //now perform IP-1, which is IP in the opposite direction\n            temp = ((left >>> 1) ^ right) & 0x55555555;\n            right ^= temp;\n            left ^= (temp << 1);\n            temp = ((right >>> 8) ^ left) & 0x00ff00ff;\n            left ^= temp;\n            right ^= (temp << 8);\n            temp = ((right >>> 2) ^ left) & 0x33333333;\n            left ^= temp;\n            right ^= (temp << 2);\n            temp = ((left >>> 16) ^ right) & 0x0000ffff;\n            right ^= temp;\n            left ^= (temp << 16);\n            temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n            right ^= temp;\n            left ^= (temp << 4);\n\n            //for Cipher Block Chaining mode, xor the message with the previous result\n            if (mode == 1) {\n                if (encrypt) {\n                    cbcleft = left;\n                    cbcright = right;\n                } else {\n                    left ^= cbcleft2;\n                    right ^= cbcright2;\n                }\n            }\n            tempresult += String.fromCharCode((left >>> 24), ((left >>> 16) & 0xff), ((left >>> 8) & 0xff), (left & 0xff), (right >>> 24), ((right >>> 16) & 0xff), ((right >>> 8) & 0xff), (right & 0xff));\n\n            chunk += 8;\n            if (chunk == 512) {\n                result += tempresult;\n                tempresult = \"\";\n                chunk = 0;\n            }\n        } //for every 8 characters, or 64 bits in the message\n\n        result += tempresult;\n        /* result = result.replace(/\\0*$/g, \"\"); */\n\n        return result;\n    }\n\n    _des_createKeys(key) {\n        let pc2bytes0 = new Array(0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204, 0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204);\n        let pc2bytes1 = new Array(0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100, 0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101);\n        let pc2bytes2 = new Array(0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808);\n        let pc2bytes3 = new Array(0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000, 0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000);\n        let pc2bytes4 = new Array(0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000, 0x41000, 0x1010, 0x41010);\n        let pc2bytes5 = new Array(0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420, 0x2000000, 0x2000400, 0x2000020, 0x2000420);\n        let pc2bytes6 = new Array(0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002);\n        let pc2bytes7 = new Array(0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000, 0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800);\n        let pc2bytes8 = new Array(0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000, 0x2000002, 0x2040002, 0x2000002, 0x2040002);\n        let pc2bytes9 = new Array(0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408, 0x10000408, 0x400, 0x10000400, 0x408, 0x10000408);\n        let pc2bytes10 = new Array(0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020, 0x102000, 0x102020, 0x102000, 0x102020);\n        let pc2bytes11 = new Array(0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000, 0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200);\n        let pc2bytes12 = new Array(0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010, 0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010);\n        let pc2bytes13 = new Array(0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105);\n\n        //how many iterations (1 for _des, 3 for triple _des)\n        let iterations = key.length > 8 ? 3 : 1; // use Triple DES for 9+ byte keys\n        //stores the return keys\n        let keys = new Array(32 * iterations);\n        //now define the left shifts which need to be done\n        let shifts = new Array(0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0);\n        //other variables\n        let lefttemp, righttemp, m = 0, n = 0, temp;\n\n        for (let j = 0; j < iterations; j++) { //either 1 or 3 iterations\n            let left = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n            let right = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n\n            temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n            right ^= temp;\n            left ^= (temp << 4);\n            temp = ((right >>> -16) ^ left) & 0x0000ffff;\n            left ^= temp;\n            right ^= (temp << -16);\n            temp = ((left >>> 2) ^ right) & 0x33333333;\n            right ^= temp;\n            left ^= (temp << 2);\n            temp = ((right >>> -16) ^ left) & 0x0000ffff;\n            left ^= temp;\n            right ^= (temp << -16);\n            temp = ((left >>> 1) ^ right) & 0x55555555;\n            right ^= temp;\n            left ^= (temp << 1);\n            temp = ((right >>> 8) ^ left) & 0x00ff00ff;\n            left ^= temp;\n            right ^= (temp << 8);\n            temp = ((left >>> 1) ^ right) & 0x55555555;\n            right ^= temp;\n            left ^= (temp << 1);\n\n            //the right side needs to be shifted and to get the last four bits of the left side\n            temp = (left << 8) | ((right >>> 20) & 0x000000f0);\n            //left needs to be put upside down\n            left = (right << 24) | ((right << 8) & 0xff0000) | ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0);\n            right = temp;\n\n            //now go through and perform these shifts on the left and right keys\n            for (let i = 0; i < shifts.length; i++) {\n                //shift the keys either one or two bits to the left\n                if (shifts[i]) {\n                    left = (left << 2) | (left >>> 26);\n                    right = (right << 2) | (right >>> 26);\n                }\n                else {\n                    left = (left << 1) | (left >>> 27);\n                    right = (right << 1) | (right >>> 27);\n                }\n                left &= -0xf;\n                right &= -0xf;\n\n                //Now apply PC-2, in such a way that E is easier when encrypting or decrypting.\n                //This conversion will look like PC-2 except only the last 6 bits of each byte are used\n                //rather than 48 consecutive bits and the order of lines will be according to\n                //how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7\n                lefttemp = pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf]\n                    | pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf]\n                    | pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf]\n                    | pc2bytes6[(left >>> 4) & 0xf];\n                righttemp = pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf]\n                    | pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf]\n                    | pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf]\n                    | pc2bytes13[(right >>> 4) & 0xf];\n                temp = ((righttemp >>> 16) ^ lefttemp) & 0x0000ffff;\n                keys[n++] = lefttemp ^ temp;\n                keys[n++] = righttemp ^ (temp << 16);\n            }\n        } //for each iterations\n        //return the keys we've created\n        return keys;\n    }\n}\n\nmodule.exports = Dukpt;"]}