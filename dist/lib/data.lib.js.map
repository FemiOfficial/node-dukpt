{"version":3,"sources":["../../lib/data.lib.js"],"names":["DataOperations","fieldArray","i","length","padChar","howMany","Array","join","asciiString","Buffer","from","toString","base64String","replace","ba","st","item","hex","keyar","match","s","String","fromCharCode","Number","push","d","h","charCodeAt","toUpperCase","data1","data2","output","result","d1","d2","hexstringToData","dataToHexstring","isASCII","SPECIAL","symbols","s_decimal","module","exports"],"mappings":"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","file":"data.lib.js","sourcesContent":["class DataOperations {\n    static fieldEmpty(fieldArray) {\n\n        for (let i = 0; i < fieldArray.length; i++)\n            if (fieldArray[i] == \"\") // empty\n                return true;\n        return false;\n    }\n\n    static getPads(padChar, howMany) {\n        return (new Array(howMany + 1)).join(padChar);\n    }\n\n    static asciiToBase64(asciiString){\n        return Buffer.from(asciiString, 'utf-8').toString('base64');\n    }\n\n    static base64ToAscii(base64String){\n        return Buffer.from(base64String, 'base64').toString('utf-8');\n    }\n\n    static removeNullCharsFromAscii(asciiString){\n        return asciiString.replace(/\\u0000/g, '');\n    }\n\n    static numericArrayToHexstring(ba) {\n\n        let st = \"\";\n        for (let i = 0; i < ba.length; i++) {\n            let item = ba[i];\n            let hex = item.toString(16);\n            if (hex.length < 2) hex = \"0\" + hex;\n            st += hex;\n        }\n        return st;\n    }\n\n    static hexstringToData(hex) {\n\n        hex = hex.replace(/\\s/g, \"\"); // eliminate spaces\n\n        let keyar = hex.match(/../g); // break into array of doublets\n\n        let s = \"\";  // holder for our return value\n\n        for (let i = 0; i < keyar.length; i++)\n            s += String.fromCharCode(Number(\"0x\" + keyar[i]));\n\n        return s;\n    }\n\n    static hexstringToNumericArray(hex) {\n\n        hex = hex.replace(/\\s/g, \"\"); // eliminate spaces\n\n        let keyar = hex.match(/../g); // break into array of doublets\n\n        let s = [];  // holder for our return value\n\n        for (let i = 0; i < keyar.length; i++)\n            s.push(Number(\"0x\" + keyar[i]));\n\n        return s;\n    }\n\n    static dataToHexstring(d) {\n        let hex = \"\";\n        for (let i = 0; i < d.length; i++) {\n            let h = (d.charCodeAt(i)).toString(16);\n            if (h.length < 2) h = \"0\" + h;\n            hex += h;\n        }\n        return hex.toUpperCase();\n    }\n\n    static XORdata(data1, data2) {\n\n        if (data1.length < data2.length) {\n\n            while (data1.length < data2.length)\n                data1 = \"\\0\" + data1; // prepend with nulls\n        }\n\n        if (data1.length > data2.length) {\n\n            while (data1.length > data2.length)\n                data2 = \"\\0\" + data2; // prepend with nulls\n        }\n\n        let output = \"\";\n\n        for (let i = 0; i < data1.length; i++) {\n            let result = data1.charCodeAt(i) ^ data2.charCodeAt(i);\n            output += String.fromCharCode(result);\n        }\n\n        return output;\n    }\n\n    static XORdataHex(d1, d2) {\n\n        let data1 = DataOperations.hexstringToData(d1);\n        let data2 = DataOperations.hexstringToData(d2);\n\n        if (data1.length < data2.length) {\n\n            while (data1.length < data2.length)\n                data1 = \"\\0\" + data1; // prepend with nulls\n        }\n\n        if (data1.length > data2.length) {\n\n            while (data1.length > data2.length)\n                data2 = \"\\0\" + data2; // prepend with nulls\n        }\n\n        let output = \"\";\n\n        for (let i = 0; i < data1.length; i++) {\n            let result = data1.charCodeAt(i) ^ data2.charCodeAt(i);\n            output += String.fromCharCode(result);\n        }\n\n        return DataOperations.dataToHexstring(output);\n    }\n\n    static ANDdata(data1, data2) {\n\n        if (data1.length < data2.length) {\n\n            while (data1.length < data2.length)\n                data1 = \"\\0\" + data1; // prepend with nulls\n        }\n\n        if (data1.length > data2.length) {\n\n            while (data1.length > data2.length)\n                data2 = \"\\0\" + data2; // prepend with nulls\n        }\n\n        let output = \"\";\n\n        for (let i = 0; i < data1.length; i++) {\n            let result = data1.charCodeAt(i) & data2.charCodeAt(i);\n            output += String.fromCharCode(result);\n        }\n\n        return output;\n    }\n\n    static hexToText(h) {\n\n        function isASCII(s) {\n            return s >= 32 && s < 127;\n        }\n\n        h = h.replace(/\\s/g, \"\"); // eliminate spaces\n\n        let SPECIAL = \".\"; //String.fromCharCode(9744);\n        let symbols = h.match(/../g);\n        let output = [];\n        for (let i = 0; i < symbols.length; i++) {\n            let s = symbols[i];\n            let s_decimal = Number(\"0x\" + s);\n            output.push(isASCII(s_decimal) ?\n                String.fromCharCode(s_decimal) : SPECIAL);\n\n        }\n        return output.join(\"\");\n    }\n}\n\nmodule.exports = DataOperations;"]}