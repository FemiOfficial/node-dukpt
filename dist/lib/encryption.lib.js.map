{"version":3,"sources":["../../lib/encryption.lib.js"],"names":["crypto","require","Encryption","hexKey","hexData","encryptionAlgorithm","keyBuf","Buffer","from","length","Error","dataBuf","iv","cipher","createCipheriv","setAutoPadding","encrypted","update","final","toString","encryptedHexData","createDecipheriv","decrypted","module","exports"],"mappings":";;;;;;AAAA,IAAMA,SAASC,QAAQ,QAAR,CAAf;;IAEMC,U;;;;;;;mCACgBC,M,EAAQC,O,EAASC,mB,EAAqB;;AAEpDA,kCAAsBA,uBAAuB,aAA7C;;AAEA,gBAAMC,SAASC,OAAOC,IAAP,CAAYL,MAAZ,EAAoB,KAApB,CAAf;;AAEA,gBAAIG,OAAOG,MAAP,IAAiB,EAArB,EAAyB;AACrB,sBAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACH;;AAED,gBAAMC,UAAUJ,OAAOC,IAAP,CAAYJ,OAAZ,EAAqB,KAArB,CAAhB;AACA,gBAAMQ,KAAKL,OAAOC,IAAP,CAAY,kCAAZ,EAAgD,KAAhD,CAAX;;AAEA,gBAAMK,SAASb,OAAOc,cAAP,CAAsBT,mBAAtB,EAA2CC,MAA3C,EAAmDM,EAAnD,EAAuDG,cAAvD,CAAsE,IAAtE,CAAf;AACA,gBAAIC,YAAYH,OAAOI,MAAP,CAAcN,OAAd,CAAhB;AACAK,yBAAaH,OAAOK,KAAP,CAAa,QAAb,CAAb;;AAEA,mBAAOX,OAAOC,IAAP,CAAYQ,SAAZ,EAAuB,QAAvB,EAAiCG,QAAjC,CAA0C,KAA1C,CAAP;AACH;;;mCAEiBhB,M,EAAQiB,gB,EAAkBf,mB,EAAqB;;AAE7DA,kCAAsBA,uBAAuB,aAA7C;;AAEA,gBAAMC,SAASC,OAAOC,IAAP,CAAYL,MAAZ,EAAoB,KAApB,CAAf;;AAEA,gBAAIG,OAAOG,MAAP,IAAiB,EAArB,EAAyB;AACrB,sBAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACH;;AAED,gBAAMC,UAAUJ,OAAOC,IAAP,CAAYY,gBAAZ,EAA8B,KAA9B,CAAhB;AACA,gBAAMR,KAAKL,OAAOC,IAAP,CAAY,kCAAZ,EAAgD,KAAhD,CAAX;;AAEA,gBAAMK,SAASb,OAAOqB,gBAAP,CAAwBhB,mBAAxB,EAA6CC,MAA7C,EAAqDM,EAArD,CAAf;AACA,gBAAIU,YAAYT,OAAOI,MAAP,CAAcN,OAAd,CAAhB;AACAW,yBAAaT,OAAOK,KAAP,EAAb;;AAEA,mBAAOX,OAAOC,IAAP,CAAYc,SAAZ,EAAuB,OAAvB,EAAgCH,QAAhC,CAAyC,KAAzC,CAAP;AAEH;;;;;;AAGLI,OAAOC,OAAP,GAAiBtB,UAAjB","file":"encryption.lib.js","sourcesContent":["const crypto = require('crypto');\n\nclass Encryption {\n    static encryptAES(hexKey, hexData, encryptionAlgorithm) {\n\n        encryptionAlgorithm = encryptionAlgorithm || 'aes-256-cbc';\n\n        const keyBuf = Buffer.from(hexKey, 'hex');\n\n        if (keyBuf.length != 32) {\n            throw new Error('key for aes encryption must be 32 bytes in length');\n        }\n\n        const dataBuf = Buffer.from(hexData, 'hex');\n        const iv = Buffer.from('00000000000000000000000000000000', 'hex');\n\n        const cipher = crypto.createCipheriv(encryptionAlgorithm, keyBuf, iv).setAutoPadding(true);\n        let encrypted = cipher.update(dataBuf);\n        encrypted += cipher.final('binary');\n\n        return Buffer.from(encrypted, 'binary').toString('hex');\n    }\n\n    static decryptAES(hexKey, encryptedHexData, encryptionAlgorithm) {\n\n        encryptionAlgorithm = encryptionAlgorithm || 'aes-256-cbc';\n\n        const keyBuf = Buffer.from(hexKey, 'hex');\n\n        if (keyBuf.length != 32) {\n            throw new Error('key for AES encryption must be 32 bytes in length');\n        }\n\n        const dataBuf = Buffer.from(encryptedHexData, 'hex');\n        const iv = Buffer.from('00000000000000000000000000000000', 'hex');\n\n        const cipher = crypto.createDecipheriv(encryptionAlgorithm, keyBuf, iv);\n        let decrypted = cipher.update(dataBuf);\n        decrypted += cipher.final();\n\n        return Buffer.from(decrypted, 'ascii').toString('hex');\n\n    }\n}\n\nmodule.exports = Encryption;"]}